using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Database;
using Database.Entities;
using Helpers;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

namespace GUI.Controllers.Api
{
    [Route("api/[controller]/[action]")]
    [ApiController]
    public class ProbeController : ControllerBase
    {
        private ILogger<ProbeController> Logger { get; set; }
        private IConfiguration Configuration { get; set; }
        private CompleteGPSUtilityContext Context { get; set; }

        public ProbeController(ILogger<ProbeController> logger, IConfiguration configuration, CompleteGPSUtilityContext context)
        {
            Logger = logger;
            Configuration = configuration;
            Context = context;
        }
        [HttpPost]
        public async Task<IActionResult> UpdateLocations(InputProbeDataModel model)
        {
            Device device = await Context.Devices.FirstOrDefaultAsync(dev => dev.IMEI == model.IMEI);

            if (device == null)
            {
                if (Parser.Bool(Configuration["Api:NewIMEIAllowed"]))
                {
                    device = new Device
                    {
                        IMEI = model.IMEI,
                        Name = "AutoGenerated",
                    };
                    Context.Devices.Add(device);

                    if ((await Context.SaveChangesAsync()) <= 0)
                    {
                        Logger.LogError($"Cannot insert new device into database");
                    }
                    else
                    {
                        Logger.LogInformation($"Created new Device with IMEI: [{device.IMEI}]");
                    }
                }
                else
                {
                    return BadRequest("Unauthorized");
                }
            }

            if (model.l.Count == 0)
            {
                Logger.LogWarning($"Locations list is empty.");
                return BadRequest("Locations empty");
            }
            else
            {
                foreach (var modelLocation in model.l)
                {
                    Location location = new Location
                    {
                        Latitude = modelLocation.Latitude,
                        Longitude = modelLocation.Longitude,
                        Altitude = modelLocation.Altitude.HasValue ? modelLocation.Altitude.Value : (short)-1,
                        BatteryPercentage = model.VoltagePercentage,
                        BatteryVoltage = model.Voltage,
                        Device = device,
                        DeviceId = device.DeviceId,
                        TimeY2K = modelLocation.TimeFrom2000,
                        CurrentInterval = model.CurrentInterval

                    };

                    Context.Locations.Add(location);
                    if ((await Context.SaveChangesAsync()) <= 0)
                    {
                        string json = JsonConvert.SerializeObject(location, Formatting.Indented);
                        Logger.LogError($"Cannot insert new Location into database.\r\nJSON:{json}");
                    }
                    else
                    {
                        Logger.LogDebug($"Inserted new Location for IMEI: [{device.IMEI}]");
                    }
                }
            }
            return Ok();
        }
    }
}